version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: getnet-facturante-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-getnet_facturante}
      POSTGRES_USER: ${DATABASE_USERNAME:-gf_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: ${TIMEZONE:-America/Argentina/Buenos_Aires}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/db:/backups
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - getnet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-gf_user} -d ${DATABASE_NAME:-getnet_facturante}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: 
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - maintenance_work_mem=64MB
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200
      - -c
      - work_mem=4MB
      - -c
      - min_wal_size=1GB
      - -c
      - max_wal_size=4GB
      - -c
      - log_timezone=${TIMEZONE:-America/Argentina/Buenos_Aires}
      - -c
      - timezone=${TIMEZONE:-America/Argentina/Buenos_Aires}

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - JAVA_VERSION=17
    image: getnet-facturante-backend:prod
    container_name: getnet-facturante-backend-prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod
      
      # Database
      DATABASE_URL: jdbc:postgresql://db:5432/${DATABASE_NAME:-getnet_facturante}?timezone=UTC&stringtype=unspecified
      DATABASE_USERNAME: ${DATABASE_USERNAME:-gf_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      
      # Server
      SERVER_PORT: 8080
      
      # JWT
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ACCESS_TTL_SECONDS: ${JWT_ACCESS_TTL_SECONDS:-900}
      JWT_REFRESH_TTL_SECONDS: ${JWT_REFRESH_TTL_SECONDS:-604800}
      JWT_ISSUER: ${JWT_ISSUER:-gf-connector}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-getnet-facturante}
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://facturante.example.com}
      
      # Security
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
      
      # Getnet
      GETNET_API_KEY: ${GETNET_API_KEY}
      GETNET_API_SECRET: ${GETNET_API_SECRET}
      GETNET_SELLER_ID: ${GETNET_SELLER_ID}
      GETNET_ENVIRONMENT: ${GETNET_ENVIRONMENT:-production}
      GETNET_WEBHOOK_USERNAME: ${GETNET_WEBHOOK_USERNAME:-}
      GETNET_WEBHOOK_PASSWORD: ${GETNET_WEBHOOK_PASSWORD:-}
      GETNET_WEBHOOK_SIGNATURE_HEADER: ${GETNET_WEBHOOK_SIGNATURE_HEADER:-X-Getnet-Signature}
      GETNET_WEBHOOK_ALLOW_UNSIGNED: ${GETNET_WEBHOOK_ALLOW_UNSIGNED:-false}
      
      # Facturante
      FACTURANTE_SERVICE_URL: ${FACTURANTE_SERVICE_URL}
      FACTURANTE_EMPRESA: ${FACTURANTE_EMPRESA}
      FACTURANTE_USUARIO: ${FACTURANTE_USUARIO}
      FACTURANTE_PASSWORD: ${FACTURANTE_PASSWORD}
      FACTURANTE_PREFIJO: ${FACTURANTE_PREFIJO:-00001}
      FACTURANTE_TIPO_COMPROBANTE: ${FACTURANTE_TIPO_COMPROBANTE:-FB}
      FACTURANTE_TIMEOUT_SECONDS: ${FACTURANTE_TIMEOUT_SECONDS:-30}
      
      # Email Notifications
      NOTIFICATION_EMAIL_ENABLED: ${NOTIFICATION_EMAIL_ENABLED:-true}
      NOTIFICATION_ADMIN_EMAIL: ${NOTIFICATION_ADMIN_EMAIL:-admin@example.com}
      NOTIFICATION_EMAIL_FROM: ${NOTIFICATION_EMAIL_FROM:-noreply@getnet-facturante.com}
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_SMTP_AUTH: ${MAIL_SMTP_AUTH:-true}
      MAIL_SMTP_STARTTLS: ${MAIL_SMTP_STARTTLS:-true}
      
      # Reconciliation
      RECONCILIATION_ENABLED: ${RECONCILIATION_ENABLED:-true}
      RECONCILIATION_DAYS_TO_CHECK: ${RECONCILIATION_DAYS_TO_CHECK:-7}
      RECONCILIATION_CRON_DAILY: ${RECONCILIATION_CRON_DAILY:-0 0 2 * * ?}
      RECONCILIATION_CRON_WEEKLY: ${RECONCILIATION_CRON_WEEKLY:-0 0 3 * * SUN}
      
      # Backup
      BACKUP_ENABLED: ${BACKUP_ENABLED:-true}
      BACKUP_DIRECTORY: /backups
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_CRON_DAILY: ${BACKUP_CRON_DAILY:-0 0 1 * * ?}
      BACKUP_CRON_WEEKLY: ${BACKUP_CRON_WEEKLY:-0 30 0 * * SUN}
      
      # Logging
      LOG_FILE: /var/log/app/getnet-facturante.log
      
      # Timezone
      TZ: ${TIMEZONE:-America/Argentina/Buenos_Aires}
      JAVA_OPTS: >-
        -Xms512m
        -Xmx2048m
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/var/log/app/
        -Duser.timezone=${TIMEZONE:-America/Argentina/Buenos_Aires}
        -Dfile.encoding=UTF-8
    volumes:
      - app_logs:/var/log/app
      - app_backups:/backups
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    networks:
      - getnet-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: getnet-facturante-frontend:prod
    container_name: getnet-facturante-frontend-prod
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://backend:8080}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - getnet-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  getnet-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  app_backups:
    driver: local
