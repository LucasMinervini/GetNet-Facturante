spring:
  profiles:
    active: prod
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://db:5432/getnet_facturante?timezone=UTC&stringtype=unspecified}
    username: ${DATABASE_USERNAME:gf_user}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      connectionInitSql: SET TIME ZONE 'UTC';
      connection-timeout: 30000
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  
  jpa:
    hibernate:
      ddl-auto: validate  # IMPORTANTE: no usar update en producción
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  jackson:
    time-zone: UTC
    serialization:
      write-dates-as-timestamps: false
  
  jvm:
    timezone: UTC

server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
  tomcat:
    threads:
      max: 200
      min-spare: 10
    max-connections: 8192
    accept-count: 100

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

app:
  name: GetNet-Facturante
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://facturante.example.com}

jwt:
  access:
    secret: ${JWT_ACCESS_SECRET}
    ttl-seconds: ${JWT_ACCESS_TTL_SECONDS:900}
  refresh:
    secret: ${JWT_REFRESH_SECRET}
    ttl-seconds: ${JWT_REFRESH_TTL_SECONDS:604800}
  issuer: ${JWT_ISSUER:gf-connector}
  audience: ${JWT_AUDIENCE:getnet-facturante}

# Configuración de seguridad adicional
security:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://facturante.example.com}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  rate-limit:
    enabled: ${RATE_LIMIT_ENABLED:true}
    requests-per-minute: ${RATE_LIMIT_REQUESTS_PER_MINUTE:100}

logging:
  level:
    root: INFO
    com.gf: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.hibernate: WARN
    org.hibernate.SQL: WARN
  file:
    name: ${LOG_FILE:/var/log/app/getnet-facturante.log}
    max-size: 100MB
    max-history: 30
    total-size-cap: 3GB
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{tenantId}] %logger{36} - %msg%n"
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) [%X{tenantId}] %cyan(%logger{36}) - %msg%n"

# Configuración de GetNet
getnet:
  api-key: ${GETNET_API_KEY}
  api-secret: ${GETNET_API_SECRET}
  seller-id: ${GETNET_SELLER_ID}
  environment: ${GETNET_ENVIRONMENT:production}
  
  # URLs por ambiente
  oauth:
    sandbox: https://api-sandbox.getnet.com.br/auth/oauth/v2/token
    homologacao: https://api-homologacao.getnet.com.br/auth/oauth/v2/token
    production: https://api.getnetpay.com.br/auth/oauth/v2/token
  
  api:
    sandbox: https://api-sandbox.getnet.com.br
    homologacao: https://api-homologacao.getnet.com.br
    production: https://api.getnetpay.com.br
  
  # Credenciales de webhook (opcional)
  webhook:
    username: ${GETNET_WEBHOOK_USERNAME:}
    password: ${GETNET_WEBHOOK_PASSWORD:}
    signature-header: ${GETNET_WEBHOOK_SIGNATURE_HEADER:X-Getnet-Signature}
    allow-unsigned: ${GETNET_WEBHOOK_ALLOW_UNSIGNED:false}

# Configuración de Facturante
facturante:
  service-url: ${FACTURANTE_SERVICE_URL}
  empresa: ${FACTURANTE_EMPRESA}
  usuario: ${FACTURANTE_USUARIO}
  password: ${FACTURANTE_PASSWORD}
  prefijo: ${FACTURANTE_PREFIJO:00001}
  tipo-comprobante: ${FACTURANTE_TIPO_COMPROBANTE:FB}
  timeout-seconds: ${FACTURANTE_TIMEOUT_SECONDS:30}

# Configuración de notificaciones por email
notification:
  email:
    enabled: ${NOTIFICATION_EMAIL_ENABLED:true}
    admin-email: ${NOTIFICATION_ADMIN_EMAIL:admin@example.com}
    from: ${NOTIFICATION_EMAIL_FROM:noreply@getnet-facturante.com}

spring.mail:
  host: ${MAIL_HOST:smtp.gmail.com}
  port: ${MAIL_PORT:587}
  username: ${MAIL_USERNAME}
  password: ${MAIL_PASSWORD}
  properties:
    mail:
      smtp:
        auth: ${MAIL_SMTP_AUTH:true}
        starttls:
          enable: ${MAIL_SMTP_STARTTLS:true}
          required: true
        connectiontimeout: 5000
        timeout: 5000
        writetimeout: 5000
      transport:
        protocol: smtp

# Configuración de reconciliación
reconciliation:
  enabled: ${RECONCILIATION_ENABLED:true}
  days-to-check: ${RECONCILIATION_DAYS_TO_CHECK:7}
  cron:
    daily: ${RECONCILIATION_CRON_DAILY:0 0 2 * * ?}
    weekly: ${RECONCILIATION_CRON_WEEKLY:0 0 3 * * SUN}
    cleanup: ${RECONCILIATION_CRON_CLEANUP:0 0 4 1 * ?}

# Configuración de backup automático
backup:
  enabled: ${BACKUP_ENABLED:true}
  directory: ${BACKUP_DIRECTORY:/backups}
  retention-days: ${BACKUP_RETENTION_DAYS:30}
  cron:
    daily: ${BACKUP_CRON_DAILY:0 0 1 * * ?}
    weekly: ${BACKUP_CRON_WEEKLY:0 30 0 * * SUN}

